These are the instructions to create a Virtual Machine using Vagrant.
By the end you will have a Ubuntu 14.04 with Postgre/PostgresGIS,
and all the requirements for GeoDjango and Google Identity Toolkit.


Install, turn on and connect to the virtual machine

$ vagrant init ubuntu/trusty64
$ vagrant up
$ vagrant ssh


Install minor requirements for our development

$ sudo apt-get install python-virtualenv
$ sudo apt-get install python3-dev


Install and configure PostgreSQL

$ sudo apt-get install -y postgresql postgresql-contrib postgresql-server-dev-9.3

$ sudo -u postgres createuser -P gear_db_user
$ sudo -u postgres createdb -O gear_db_user gearcircles


Check PostgreSQL

$ psql -h localhost -U gear_db_user gearcircles
$ \l
$ \q


Install and configure PostGIS

$ sudo apt-get install -y postgis postgresql-9.3-postgis-2.1
$ sudo -u postgres psql -c "CREATE EXTENSION postgis; CREATE EXTENSION postgis_topology;" gearcircles


Install GeoDjango Library Requirements

$ sudo apt-get install libproj-dev gdal-bin


Installations are over, now its time to set a virtual network interface with its owwn IP and a shared folder

$ exit
$ vagrant halt


Uncoment/edit the following line in the Vagrant file

config.vm.network "public_network"
config.vm.synced_folder "/Users/vmenezes/projects/gearcircles", "/home/vagrant/project"


Start the server and check the IP of your second interface, this is where your server should run!
User $ python3 manage.py runserver YOURIP:8000 to run the server

$ vagrant up
$ vagrant ssh
$ ifconfig


Google identity toolkits requires libffi

$ sudo apt-get install libffi-dev





Docker Deployment
=================

Dependent on kartoza/postgis

Pull the latest postgis image

`docker pull kartoza/postgis`

Start the postgis container with the name `postgis`. Note the `-v` tag - this stores the postgres data on the host system (in `/gears/postgres_data`) rather than inside the container. This is important because if you deleted the `postgis` container at any point, all your data would be deleted with it. This way, it is stored on the host system and you can back it up if necessary.

`docker run --name postgis -dt -v /gears/postgres_data:/var/lib/postgresql -p 25432:5432 kartoza/postgis`

Create the DB inside the container and create the postgis extension. You must have `postgresql-client` installed on the host. Username and password are `docker` and `docker` by default.

`createdb gearcircles -h localhost -U docker -p 25432`

`psql -h localhost -U docker -p 25432 -c "CREATE EXTENSION postgis; CREATE EXTENSION postgis_topology;" gearcircles`

Build your project, inside the `gc_project` directory containing `Dockerfile`

`docker build -t gearcircles .`

To migrate the database

`docker run -dit --link postgis:POSTGIS --name migrate gearcircles python3 manage.py migrate`

To run the seeds

`docker run -dit --link postgis:POSTGIS --name seeds gearcircles python3 seeds.py`

To start the server

`docker run -dit --link postgis:POSTGIS --name gearcircles gearcircles`

Run [nginx-proxy](https://github.com/jwilder/nginx-proxy)

`docker run -d -p 80:80 -v /var/run/docker.sock:/tmp/docker.sock:ro jwilder/nginx-proxy`

Some useful Docker commands:

Check the running containers: `docker ps`

Check recently exited containers: `docker ps -l`

Look at the output of a container (for example `nginx-proxy` contains all your network traffic): `docker logs [container name]`

Kill a container: `docker kill [container name]`

Remove a container: `docker rm [container name]`

See all docker images available: `docker images`

Remove an image `docker rmi -f [image name]`
